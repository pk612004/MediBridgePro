// MediBridgePro ‚Äì Final App.js (glass UI + typewriter + health score + entity chart + styled PDF)
import React, { useState } from "react";
import {
  Button,
  Container,
  Typography,
  Box,
  Paper,
  CircularProgress,
  Slide,
  Fade,
  Grid,
  Stack,
} from "@mui/material";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import FileDownloadIcon from "@mui/icons-material/FileDownload";
import VolumeUpIcon from "@mui/icons-material/VolumeUp";
import { styled } from "@mui/system";
import Lottie from "lottie-react";
import { Typewriter } from "react-simple-typewriter";
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";
import uploadAnim from "./assets/upload.json";
import processingAnim from "./assets/processing.json";
import illustration from "./assets/illustration.png";
import side1 from "./assets/side1.png";
import side2 from "./assets/side2.png";
import jsPDF from "jspdf";
import "./App.css";

/* ----- constants ----- */
const Input = styled("input")({ display: "none" });
const COLORS = ["#0088FE", "#00C49F", "#FF8042"];
const healthTips = [
  "Drink 2 L water daily üíß",
  "Wash hands regularly üßº",
  "Sleep 7-8 hrs every night üõå",
  "30-min exercise each day üèÉ‚Äç‚ôÄÔ∏è",
];

/* ----- helper to extract simple entities from summary ----- */
const extractEntities = (txt) => {
  const summary = (txt || "").toLowerCase();
  const conditions = [
    "diabetes",
    "hypertension",
    "asthma",
    "cancer",
    "anemia",
    "stroke",
  ];
  const medications = [
    "metformin",
    "amlodipine",
    "paracetamol",
    "ibuprofen",
    "aspirin",
  ];
  const procedures = ["ecg", "mri", "x-ray", "ct", "lifestyle"];

  const data = [
    {
      name: "Conditions",
      value: conditions.filter((c) => summary.includes(c)).length,
    },
    {
      name: "Medications",
      value: medications.filter((m) => summary.includes(m)).length,
    },
    {
      name: "Procedures",
      value: procedures.filter((p) => summary.includes(p)).length,
    },
  ].filter((d) => d.value > 0);

  return data;
};

export default function App() {
  /* ----- state ----- */
  const [file, setFile] = useState(null);
  const [summary, setSummary] = useState("");
  const [isLoading, setLoading] = useState(false);
  const [healthScore] = useState(Math.floor(Math.random() * 41) + 60); // demo 60-100
  const [entityData, setEntityData] = useState([]);

  /* ----- handlers ----- */
  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
    setSummary("");
    setEntityData([]);
  };

  const handleUpload = async () => {
    if (!file) return;
    setLoading(true);
    const fd = new FormData();
    fd.append("file", file);

    try {
      const r = await fetch(
        "https://medibridge-backend-l8cf.onrender.com/upload_pdf",
        { method: "POST", body: fd }
      );
      const data = await r.json();
      setSummary(data.summary);
      setEntityData(extractEntities(data.summary));
    } catch {
      setSummary("‚ùå Error: Could not connect to backend.");
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = () => {
    const doc = new jsPDF();
    /* header */
    doc.setFillColor(0, 188, 212);
    doc.rect(0, 0, 210, 20, "F");
    doc.setFontSize(16).setTextColor(255, 255, 255);
    doc.setFont("helvetica", "bold");
    doc.text("MediBridgePro Health Passport", 105, 12, { align: "center" });
    /* footer */
    doc.setFillColor(240, 246, 255);
    doc.rect(0, 285, 210, 12, "F");
    doc.setFontSize(9).setTextColor(100);
    doc.text(
      "Generated by MediBridgePro | ¬©2025 ‚Äì Better healthcare with AI",
      105,
      292,
      { align: "center" }
    );
    /* body */
    doc.setFontSize(12).setTextColor(0);
    doc.setFont("times", "italic").text("Summary:", 10, 30);
    doc.setFont("times", "normal");
    doc.text(doc.splitTextToSize(summary || "No summary yet.", 190), 10, 40);
    doc.setFont("helvetica", "bold").text("Health Score:", 10, 120);
    doc.setFontSize(28).setTextColor(0, 188, 212);
    doc.text(`${healthScore}%`, 10, 140);
    doc.save("MediBridge_Health_Passport.pdf");
  };

  const handleSpeak = () =>
    window.speechSynthesis.speak(new SpeechSynthesisUtterance(summary));

  /* ----- JSX ----- */
  return (
    <>
      {/* decor */}
      <div className="plus-bg" />
      <img src={side1} alt="" className="floating-decor floating-1" />
      <img src={side2} alt="" className="floating-decor floating-2" />
      <div className="floating-quote floating-quote-top">
        ‚ÄúEvery report is a step closer to healing.‚Äù
      </div>
      <div className="floating-quote floating-quote-bottom">
        ‚ÄúTechnology + empathy = MediBridgePro.‚Äù
      </div>

      {/* hero */}
      <Box
        sx={{
          textAlign: "center",
          py: 8,
          background: "linear-gradient(135deg,#d0f1ff 0%,#e3f6ff 100%)",
          borderBottom: "1px solid #cce0ff",
        }}
      >
        <Typography
          variant="h2"
          sx={{
            fontWeight: 800,
            fontFamily: "Playfair Display,serif",
            background: "linear-gradient(90deg,#4facfe 0%,#00f2fe 100%)",
            WebkitBackgroundClip: "text",
            WebkitTextFillColor: "transparent",
            animation: "pulse 2.5s infinite",
          }}
        >
          MediBridge&nbsp;Pro
        </Typography>
        <Typography
          variant="h6"
          color="text.secondary"
          maxWidth="md"
          mx="auto"
          mt={2}
        >
          <Typewriter
            words={[
              "AI-generated medical summaries üìë",
              "Instant health passports üìú",
              "Secure PDF uploads üîê",
            ]}
            cursor
            cursorStyle="_"
            typeSpeed={60}
            deleteSpeed={40}
            delaySpeed={2000}
          />
        </Typography>
        <style>{`
          @keyframes pulse{0%{transform:scale(1)}50%{transform:scale(1.04)}100%{transform:scale(1)}}
        `}</style>
      </Box>

      {/* health tips */}
      <Box
        sx={{
          display: "flex",
          flexWrap: "wrap",
          justifyContent: "center",
          gap: 3,
          mt: 4,
          mb: 6,
          px: 2,
        }}
      >
        {healthTips.map((tip, i) => (
          <Box
            key={tip}
            sx={{
              px: 3,
              py: 1,
              borderRadius: 20,
              background: "rgba(255,255,255,0.6)",
              backdropFilter: "blur(10px)",
              fontWeight: 500,
              color: "#003366",
              animation: `floatTip${i} 10s ease-in-out infinite`,
            }}
          >
            <Typewriter
              words={[tip]}
              loop={0}
              cursor
              typeSpeed={60}
              deleteSpeed={30}
              delaySpeed={2500}
            />
            <style>{`
              @keyframes floatTip${i}{
                0%,100%{transform:translateY(0)}
                50%{transform:translateY(-10px)}
              }
            `}</style>
          </Box>
        ))}
      </Box>

      {/* upload + summary */}
      <Container maxWidth="md" sx={{ mt: 6 }}>
        <Paper
          elevation={3}
          sx={{
            p: 6,
            borderRadius: 6,
            background: "rgba(255,255,255,0.2)",
            backdropFilter: "blur(16px)",
            boxShadow: "0 8px 32px rgba(0,0,0,0.1)",
            border: "1px solid rgba(255,255,255,0.4)",
            position: "relative",
            zIndex: 1,
          }}
        >
          <Grid container spacing={4} alignItems="center">
            <Grid item xs={12} md={6}>
              <img
                src={illustration}
                alt="AI Medical"
                style={{ width: "90%", borderRadius: 20, maxHeight: 320 }}
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <Box textAlign="center">
                {!file && !isLoading && (
                  <Lottie animationData={uploadAnim} style={{ height: 150 }} />
                )}
                {file && (
                  <Typography variant="subtitle1" gutterBottom>
                    üìÑ {file.name}
                  </Typography>
                )}
                <label htmlFor="upload-pdf">
                  <Input
                    id="upload-pdf"
                    type="file"
                    accept="application/pdf"
                    onChange={handleFileChange}
                  />
                  <Button
                    variant="contained"
                    component="span"
                    startIcon={<CloudUploadIcon />}
                    sx={{ mt: 2, fontWeight: 600 }}
                  >
                    Upload PDF
                  </Button>
                </label>
                {file && (
                  <Button
                    variant="outlined"
                    sx={{ mt: 2, ml: 2, fontWeight: 600 }}
                    disabled={isLoading}
                    onClick={handleUpload}
                  >
                    Generate Summary
                  </Button>
                )}
                {isLoading && (
                  <Box mt={4}>
                    <Lottie
                      animationData={processingAnim}
                      style={{ height: 100 }}
                    />
                    <Typography color="text.secondary">
                      Analyzing report‚Ä¶
                    </Typography>
                    <CircularProgress sx={{ mt: 2 }} />
                  </Box>
                )}
              </Box>
            </Grid>
          </Grid>

          {/* summary & score */}
          <Slide
            direction="up"
            in={!!summary && !isLoading}
            mountOnEnter
            unmountOnExit
          >
            <Fade in={!!summary && !isLoading}>
              <Box mt={6} className="summary-card">
                <Typography variant="h6" gutterBottom>
                  üìù Summary:
                </Typography>
                <Typography
                  variant="body1"
                  sx={{
                    whiteSpace: "pre-wrap",
                    fontFamily: "Georgia, serif",
                    fontSize: "1rem",
                    lineHeight: 1.6,
                    color: "#1a1a1a",
                  }}
                >
                  {summary}
                </Typography>

                <Stack direction="row" spacing={2} sx={{ mt: 3 }}>
                  <Button
                    variant="outlined"
                    startIcon={<VolumeUpIcon />}
                    onClick={handleSpeak}
                  >
                    Read Aloud
                  </Button>
                  <Button
                    variant="contained"
                    startIcon={<FileDownloadIcon />}
                    onClick={handleDownload}
                  >
                    Download PDF
                  </Button>
                </Stack>

                {/* score ring */}
                <Box sx={{ mt: 5, textAlign: "center" }}>
                  <Typography variant="subtitle1" gutterBottom>
                    ‚ù§Ô∏è Estimated Health Score
                  </Typography>
                  <Box sx={{ position: "relative", display: "inline-flex" }}>
                    <CircularProgress
                      variant="determinate"
                      value={healthScore}
                      size={100}
                      thickness={5}
                    />
                    <Box
                      sx={{
                        top: 0,
                        left: 0,
                        bottom: 0,
                        right: 0,
                        position: "absolute",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                      }}
                    >
                      <Typography variant="h6" color="text.secondary">
                        {healthScore}%
                      </Typography>
                    </Box>
                  </Box>
                </Box>

                {/* entity chart */}
                {entityData.length > 0 && (
                  <Box mt={6}>
                    <Typography variant="h6" gutterBottom>
                      üß† Medical Entity Chart
                    </Typography>
                    <ResponsiveContainer width="100%" height={260}>
                      <PieChart>
                        <Pie
                          data={entityData}
                          dataKey="value"
                          nameKey="name"
                          cx="50%"
                          cy="50%"
                          outerRadius={90}
                          label={({ name, percent }) =>
                            `${name} ${(percent * 100).toFixed(0)}%`
                          }
                        >
                          {entityData.map((_, idx) => (
                            <Cell
                              key={idx}
                              fill={COLORS[idx % COLORS.length]}
                            />
                          ))}
                        </Pie>
                        <Tooltip />
                        <Legend verticalAlign="bottom" height={36} />
                      </PieChart>
                    </ResponsiveContainer>
                  </Box>
                )}
              </Box>
            </Fade>
          </Slide>
        </Paper>
      </Container>

      {/* footer */}
      <Box
        sx={{
          mt: 10,
          py: 4,
          textAlign: "center",
          backgroundColor: "#f0f6ff",
          borderTop: "1px solid #dce8f8",
        }}
      >
        <Typography variant="body2" color="text.secondary">
          ¬© 2025 MediBridgePro | Built with üíñ for better healthcare
        </Typography>
      </Box>
    </>
  );
}
